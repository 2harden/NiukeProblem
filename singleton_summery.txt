// 单例模式

// 总结：
// Eager Singleton 虽然是线程安全的，但存在潜在问题；
// Lazy Singleton 通常需要加锁来保证线程安全，但局部静态变量版本在C++11后是线程安全的；
// 局部静态变量版本（Meyers Singleton）最优雅;

// 方式一：懒汉版（Lazy Singleton），线程不安全
// 这是单例模式最经典的实现方式，将构造函数和拷贝构造函数都设为私有的，而且采用了延迟初始化的方式，在第一次调用getInstance()的时候才会生成对象，不调用就不会生成对象，不占据内存。
// 然而，在多线程的情况下，这种方法是不安全的。

// 分析：正常情况下，如果线程A调用getInstance()时，将m_instance 初始化了，那么线程B再调用getInstance()时，就不会再执行new了，直接返回之前构造好的对象。
// 然而存在这种情况，线程A执行m_instance = new Singleton()还没完成，这个时候m_instance仍然为nullptr，线程B也正在执行m_instance = new Singleton()，
// 这是就会产生两个对象，线程A和B可能使用的是同一个对象，也可能是两个对象，这样就可能导致程序错误，同时，还会发生内存泄漏。
class Singleton
{
private:
    static Singleton *m_instance; // 私有化静态成员变量

private:
    Singleton(){}; // 私有化类的构造函数，不允许使用者自己生成对象
    Singleton(const Singleton& other){}; // 私有化类的拷贝构造函数
    Singleton& operator=(const Singleton& other){};

public:
    static Singleton *getInstanse(){
        // 先检查对象是否存在
        if(m_instance == nullptr){
            m_instance = new Singleton();
        }
        
        return m_instance;
    }
};
Singleton* Singleton::m_instance = nullptr; // 静态成员需要先初始化

// 懒汉版优化，线程安全，但是锁的代价过高
// 分析：这种写法不会出现上面两个线程都执行new的情况，当线程A在执行m_instance = new Singleton()的时候，线程B如果调用了getInstance()，
// 一定会被阻塞在加锁处，等待线程A执行结束后释放这个锁。从而是线程安全的。

// 但这种写法的性能不高，因为每次调用getInstance()都会加锁释放锁，而这个步骤只有在第一次new Singleton()才是有必要的，只要m_instance被创建出来了，
// 不管多少线程同时访问，使用if (m_instance == nullptr) 进行判断都是足够的（只是读操作，不需要加锁），没有线程安全问题，加了锁之后反而存在性能问题。
class Singleton
{
private:
    static Singleton *m_instance; // 私有化静态成员变量

private:
    Singleton(){}; // 私有化类的构造函数，不允许使用者自己生成对象
    Singleton(const Singleton& other){}; // 私有化类的拷贝构造函数
    Singleton& operator=(const Singleton& other){};

public:
    static Singleton *getInstanse(){
        Lock lock; // 加锁
        // 先检查对象是否存在
        if(m_instance == nullptr){
            m_instance = new Singleton();
        }
        
        return m_instance;
    }
};
Singleton* Singleton::m_instance = nullptr; // 静态成员需要先初始化

// C++11规定了local static在多线程条件下的初始化行为，要求编译器保证了内部静态变量的线程安全性。
// 在C++11标准下，《Effective C++》提出了一种更优雅的单例模式实现，使用函数内的 local static 对象。这样，只有当第一次访问getInstance()方法时才创建实例。
// 这种方法也被称为Meyers' Singleton。C++11之后该实现是线程安全的，C++11之前仍需加锁。

// gcc 4.0之后的编译器支持这种写法。
// C++11及以后的版本（如C++14）的多线程下，正确。
// C++11之前不能这么写。
class Singleton
{
private:
    Singleton(); // 私有构造函数，不允许使用者自己生成对象
    Singleton(const Singleton& other);
    Singleton& operator=(const Singleton& other);

public:
    // 注意返回的是引用
    static Singleton& getInstance(){
        static Singleton m_instance; // 局部静态变量
        return m_instance;
    }
};

// 方式二：饿汉版（Eager Singleton），指单例实例在程序运行时被立即执行初始化
// 由于在main函数之前初始化，所以没有线程安全的问题。但是潜在问题在于no-local static对象（函数外的static对象）在不同编译单元中的初始化顺序是未定义的。也即，static Singleton instance;
// 和static Singleton& getInstance()二者的初始化顺序不确定，如果在初始化完成之前调用 getInstance() 方法会返回一个未定义的实例。

// initialize defaultly
class Singleton
{
private:
	static Singleton m_instance;

private:
	Singleton();
	~Singleton();
	Singleton(const Singleton&);
	Singleton& operator=(const Singleton&);

public:
	static Singleton& getInstance() {
		return m_instance;
	}
};

Singleton Singleton::m_instance; // 静态成员需要先初始化